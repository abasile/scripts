/**
 * Created by a on 01/09/2014.
 */

include('lib/web')

def pushbulletTest = {
    PushBullet("s095DFqBN4Pp3ltO9XL7eUVD5cZ0tfYK", "Galaxy Note II").sendHtml("test Notification",
            """<!DOCTYPE html>
<html>
  <head>
    <meta charset='UTF-8' />
    <style>
\t\t\t\t\t\tp{font-family:Arial,Helvetica,sans-serif}
\t\t\t\t\t\tp b{color:#07a}
\t\t\t\t\t\thr{border-style:dashed;border-width:1px 0 0 0;border-color:lightgray}
\t\t\t\t\t\tsmall{color:#d3d3d3;font-size:xx-small;font-weight:normal;font-family:Arial,Helvetica,sans-serif}
\t\t\t\t\t\ttable a:link{color:#666;font-weight:bold;text-decoration:none}
\t\t\t\t\t\ttable a:visited{color:#999;font-weight:bold;text-decoration:none}
\t\t\t\t\t\ttable a:active,table a:hover{color:#bd5a35;text-decoration:underline}
\t\t\t\t\t\ttable{font-family:Arial,Helvetica,sans-serif;color:#666;background:#eaebec;margin:15px;border:#ccc 1px solid;border-radius:3px;box-shadow:0 1px 2px #d1d1d1}
\t\t\t\t\t\ttable th{padding:15px;border-top:1px solid #fafafa;border-bottom:1px solid #e0e0e0;background:#ededed}
\t\t\t\t\t\ttable th{text-align:center;padding-left:20px}
\t\t\t\t\t\ttable tr:first-child th:first-child{border-top-left-radius:3px}
\t\t\t\t\t\ttable tr:first-child th:last-child{border-top-right-radius:3px}
\t\t\t\t\t\ttable tr{text-align:left;padding-left:20px}
\t\t\t\t\t\ttable td:first-child{text-align:left;padding-left:20px;border-left:0}
\t\t\t\t\t\ttable td{padding:15px;border-top:1px solid #fff;border-bottom:1px solid #e0e0e0;border-left:1px solid #e0e0e0;background:#fafafa;white-space:nowrap}
\t\t\t\t\t\ttable tr.even td{background:#f6f6f6}
\t\t\t\t\t\ttable tr:last-child td{border-bottom:0}
\t\t\t\t\t\ttable tr:last-child td:first-child{border-bottom-left-radius:3px}
\t\t\t\t\t\ttable tr:last-child td:last-child{border-bottom-right-radius:3px}
\t\t\t\t\t\ttable tr:hover td{background:#f2f2f2}
\t\t\t\t\t</style>
    <title>[FileBot] Primer.2004.HDTV.720p.x264.With.Commentary-fLAMEhd.mkv</title>
  </head>
  <body>
    <p>FileBot finished processing
      <b>Primer.2004.HDTV.720p.x264.With.Commentary-fLAMEhd.mkv</b> (2 files).
    </p>
    <hr />
    <table>
      <tr>
        <th>Original Name</th>
        <th>New Name</th>
        <th>New Location</th>
      </tr>
      <tr>
        <td>Primer.2004.HDTV.720p.x264.With.Commentary-fLAMEhd.mkv</td>
        <td>Primer-720p.HDTV.x264-fLAMEhd.mkv</td>
        <td>D:\\medias\\videos\\films\\Primer(2004)</td>
      </tr>
      <tr>
        <td>Primer.2004.HDTV.720p.x264.With.Commentary-fLAMEhd.eng.srt</td>
        <td>Primer-720p.HDTV.x264-fLAMEhd.srt</td>
        <td>D:\\medias\\videos\\films\\Primer(2004)</td>
      </tr>
    </table>
    <hr />
    <small>// Generated by FileBot 4.2 (r2326) on Toon-desktop at 01/09/14 15:37:19</small>
  </body>
</html> """, "test body")
    print "test"
}

def getSubSet = {
    // find folder with missing subtitle
    def files = getRenameLog(true);
    def subset = files.findAll{f -> files.findIndexOf{i->i==f}> java.lang.Math.max(0,files.size()-1000)}
    return subset
}

def addMissingSubTest = {log , file ->
    // find files without subtitle
    def subtitles = log.findAll{key, value -> key.name.endsWith(".srt")}
    def withSub = (log - subtitles).findAll { key, value ->
        subtitles.findAll { subkey, subvalue -> subvalue.name.startsWith(value.nameWithoutExtension) }
    }
    def withoutSub = log - subtitles - withSub
    def builder  = new groovy.json.JsonBuilder()
    def list = new groovy.json.JsonSlurper().parseText((new File(file).text)?:"[]")
    withoutSub.each{ key , value ->
        list.add([dir : value.dir.path , file : value.name , original : key.name , date : System.currentTimeMillis()])
    }
    builder.call(list)

    new File(file).write(builder.toPrettyString())
}

def findSubTest = { missingSubFile , notFoundMissingSubFile->
    def json  = new groovy.json.JsonSlurper().parseText((new File(missingSubFile).text)?:"[]")
    def notFound = []
    def rejected = []
    json.each{ video ->
        def currentFile = new File("$video.dir\\\\$video.file")
        def oldFile = new File("$video.dir\\$video.original")
        println "$currentFile.path  -->  $oldFile.path"
        currentFile.renameTo(oldFile)
        def subtitleFiles = getMissingSubtitles(file:[oldFile], lang:'en', strict:true, output:'srt', encoding:'UTF-8', db: 'OpenSubtitles', format:'MATCH_VIDEO_ADD_LANGUAGE_TAG') ?: []
        def sub = subtitleFiles.size()>0?subtitleFiles[0] : null
        if (sub) {sub.renameTo("$sub.dir\\${currentFile.nameWithoutExtension}.eng.$sub.extension")}
        else{(System.currentTimeMillis() - video.date < 10*24*3600*1000)? notFound.add(video) : rejected.add(video)}
        oldFile.renameTo(currentFile)
    }

    def builder  = new groovy.json.JsonBuilder()
    builder.call(notFound)
    new File(missingSubFile).write(builder.toPrettyString())

    def rejectedFile = new groovy.json.JsonSlurper().parseText((new File(notFoundMissingSubFile).text)?:"[]")
    builder.call(rejectedFile+rejected)
    new File(notFoundMissingSubFile).write(builder.toPrettyString())
}

def join = {
    def test = "test"
    print test

}

def utorrentTest = {
    def ut = Utorrent("localhost", 8000, "tooon", "d13,r15.", log)

    ut.removedata("F5D9B9603602C6CA0A05C0C67AB2CA0EB6886FCD")
}
//pushbulletTest()
//addMissingSubTest(getSubSet(),"D:\\Desktop\\withoutSubList.json")
//findSubTest("E:\\downloadchaine\\withoutSubList.json","E:\\downloadchaine\\subNotFoundList.json")
//utorrentTest()

join()

